{"version":3,"sources":["trivia.png","services/fetch.js","redux/actions/index.js","pages/Login.jsx","utils/formatString.js","components/Header.jsx","pages/Game.jsx","helpers/consts.js","pages/Settings.jsx","pages/Feedback.jsx","App.js","serviceWorker.js","redux/reducers/player.js","redux/reducers/token.js","redux/reducers/index.js","redux/store/index.js","index.js"],"names":["module","exports","fetchToken","a","fetch","response","data","json","console","error","message","fetchQuestion","token","saveToken","payload","type","Login","checkInput","state","playerName","gravatarEmail","length","setState","isBtnDisabled","handleChange","target","name","value","saveTokenLocalStorage","props","localStorage","setItem","handleLogin","e","preventDefault","encryptedEmail","md5","toString","log","saveTokenProp","saveNameProp","saveEmailProp","isLogged","this","to","className","src","trivia","alt","onSubmit","action","data-testid","placeholder","onChange","disabled","Component","connect","dispatch","formatQuotes","map","result","question","correct_answer","incorrect_answers","formatedQ","replace","formatedC","formatedI","answer","Header","email","score","player","Game","setTimer","intervalId","setInterval","counter","clearInterval","prevState","sortAnswers","questions","sortedAnswers","quest","correctAnswer","incorrectAnswer","sort","Math","random","getNewToken","newToken","getQuestions","getItem","response_code","results","loading","saveRanking","newPoints","saveUserScoreProp","newScore","ranking","picture","JSON","stringify","saveAssertions","saveUserAssertionsProp","assertions","calculateTotal","difficulty","difficultyPoints","total","selectAnswer","correctAnswerClassName","wrongAnswerClassName","nextQuestion","switchQuestion","questionNumber","feedback","category","index","key","onClick","React","saveUserScore","saveUserAssertions","Settings","Feedback","isRedirected","App","exact","path","component","Boolean","window","location","hostname","match","INITIAL_STATE","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","Cypress","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,oC,iRCG9BC,EAAU,uCAAG,8BAAAC,EAAA,+EAECC,MALT,qDAGQ,cAEhBC,EAFgB,OAGhBC,EAAOD,EAASE,OAHA,kBAIfD,GAJe,gCAMtBE,QAAQC,MAAM,KAAMC,SANE,yDAAH,qDAUVC,EAAa,uCAAG,WAAOC,GAAP,iBAAAT,EAAA,+EAEFC,MAAM,8CAAD,OAA+CQ,IAFlD,cAEnBP,EAFmB,OAGnBC,EAAOD,EAASE,OAHG,kBAIlBD,GAJkB,gCAMzBE,QAAQC,MAAM,KAAMC,SANK,yDAAH,sDCYnB,IAAMG,EAAY,SAACC,GAAD,MAAc,CACrCC,KApBwB,aAqBxBD,Y,iBClBIE,E,kDACJ,aAAe,IAAD,8BACZ,gBAUFC,WAAa,WACX,MAAsC,EAAKC,MAAnCC,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,cAEhBD,EAAWE,OAAS,GAAKD,EAAcC,OAAS,EAClD,EAAKC,SAAS,CACZC,eAAe,IAGjB,EAAKD,SAAS,CACZC,eAAe,KApBP,EAyBdC,aAAe,YAAiB,IAAdC,EAAa,EAAbA,OACRC,EAAgBD,EAAhBC,KAAMC,EAAUF,EAAVE,MACd,EAAKL,SAAL,eAAiBI,EAAOC,GAAS,EAAKV,aA3B1B,EA8BdW,sBAAwB,WACtB,IAAQhB,EAAU,EAAKiB,MAAfjB,MACRkB,aAAaC,QAAQ,QAASnB,IAhClB,EAmCdoB,YAnCc,uCAmCA,WAAOC,GAAP,+BAAA9B,EAAA,6DACZ8B,EAAEC,iBADU,EAE0B,EAAKhB,MAAnCC,EAFI,EAEJA,WAAYC,EAFR,EAEQA,cACde,EAAiBC,IAAIhB,GAAeiB,WAC1C7B,QAAQ8B,IAAIH,GAJA,EAM2C,EAAKN,MAApDU,EANI,EAMJA,cAAeC,EANX,EAMWA,aAAcC,EANzB,EAMyBA,cANzB,SAOOvC,IAPP,cAONI,EAPM,iBAQNiC,EAAcjC,EAAKM,OARb,QASZ,EAAKgB,wBACLY,EAAarB,GACbsB,EAAcN,GACd,EAAKb,SAAS,CAAEoB,UAAU,IAZd,4CAnCA,sDAGZ,EAAKxB,MAAQ,CACXC,WAAY,GACZC,cAAe,GACfG,eAAe,EACfmB,UAAU,GAPA,E,0CAkDd,WACE,MAA+DC,KAAKzB,MAA5DC,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,cAAeG,EAAnC,EAAmCA,cACnC,OADA,EAAkDmB,SAC7B,kBAAC,WAAD,CAAUE,GAAG,UAEhC,0BAAMC,UAAU,cACd,yBAAKA,UAAU,WAAWC,IAAMC,IAASC,IAAI,WAC7C,0BAAMH,UAAU,aAAaI,SAAWN,KAAKX,YAAckB,OAAO,IAChE,2BACEL,UAAU,cACVM,cAAY,oBACZzB,KAAK,aACLX,KAAK,OACLqC,YAAY,OACZzB,MAAQR,EACRkC,SAAWV,KAAKnB,eAElB,2BACEqB,UAAU,cACVnB,KAAK,gBACLyB,cAAY,uBACZpC,KAAK,QACLqC,YAAY,kBACZzB,MAAQP,EACRiC,SAAWV,KAAKnB,eAElB,4BACEqB,UAAU,WACVS,SAAW/B,EACXG,KAAK,UACLyB,cAAY,WACZpC,KAAK,UALP,gB,GA5EUwC,aA6GLC,eAZS,SAAC,GAAD,MAAqC,CAC3D5C,MADsB,EAAGA,MAEzBc,KAFsB,EAAUA,KAGhCN,cAHsB,EAAgBA,kBANb,SAACqC,GAAD,MAAe,CACxClB,cAAe,SAAC3B,GAAD,OAAW6C,EAAS5C,EAAUD,KAC7C4B,aAAc,SAACd,GAAD,OAAU+B,EDxEY,CACpC1C,KA7B4B,iBA8B5BD,QCsE0CY,KAC1Ce,cAAe,SAACrB,GAAD,OAAmBqC,EDpEG,CACrC1C,KA/B6B,kBAgC7BD,QCkEqDM,QAexCoC,CAA6CxC,G,eCjG7C0C,EApBM,SAACpD,GAiBpB,OAhBiBA,EAAKqD,KAAI,SAACC,GAEzB,IAAQC,EAAgDD,EAAhDC,SAAUC,EAAsCF,EAAtCE,eAAgBC,EAAsBH,EAAtBG,kBAC5BC,EAAYH,EAASI,QAAQ,UAAW,KAAKA,QAAQ,UAAW,KACnEA,QAAQ,WAAY,QACjBC,EAAYJ,EAAeG,QAAQ,UAAW,KAAKA,QAAQ,UAAW,KACzEA,QAAQ,WAAY,QACjBE,EAAYJ,EAAkBJ,KAAI,SAACS,GAAD,OACtCA,EAAOH,QAAQ,UAAW,KAAKA,QAAQ,UAAW,KAAKA,QAAQ,WAAY,WAC7E,OAAO,2BACFL,GADL,IAEEC,SAAUG,EACVF,eAAgBI,EAChBH,kBAAmBI,QCVnBE,G,kKACJ,WACE,MAA+B1B,KAAKd,MAA5BH,EAAR,EAAQA,KAAM4C,EAAd,EAAcA,MAAOC,EAArB,EAAqBA,MACrB,OACE,yBAAK1B,UAAU,cACb,yBACEA,UAAU,aACVC,IAAG,0CAAsCwB,GACzCtB,IAAI,mBACJG,cAAY,2BAEd,wBACEN,UAAU,cACVM,cAAY,sBAFd,mBAIezB,IAEf,wBAAImB,UAAU,eAAeM,cAAY,gBAAzC,iBAAmEoB,S,GAjBtDhB,cAmCNC,mBARf,YAAsC,IAAXgB,EAAU,EAAVA,OACzB,MAAO,CACL9C,KAAM8C,EAAO9C,KACb4C,MAAOE,EAAOF,MACdC,MAAOC,EAAOD,SAIHf,CAAyBa,GC3BlCI,E,kDACJ,aAAe,IAAD,8BACZ,gBAuBFC,SAAW,WACT,EAAKC,WAAaC,aAAY,WACR,EAAK1D,MAAjB2D,SACO,GACbC,cAAc,EAAKH,YACnB,EAAKrD,SAAS,CAAEuD,QAAS,KAEzB,EAAKvD,UAAS,SAACyD,GAAD,MAAgB,CAC5BF,QAASE,EAAUF,QAAU,QC5Cb,MDYV,EAsCdG,YAAc,SAACC,GAIb,IAAMC,EAAgBD,EAAUtB,KAAI,SAACwB,GACnC,IAAwBC,EAAsDD,EAAtErB,eAAkDuB,EAAoBF,EAAvCpB,kBACvC,MAAO,CAACqB,GAAD,mBAAmBC,IAAiBC,MAAK,kBAAMC,KAAKC,SC1DtC,SD4DvB,EAAKlE,SAAS,CAAE4D,mBA9CJ,EAiDdO,YAjDc,sBAiDA,8BAAAtF,EAAA,6DACJoC,EAAkB,EAAKV,MAAvBU,cADI,SAEWrC,IAFX,OAENwF,EAFM,OAGZ5D,aAAaC,QAAQ,QAAS2D,EAAS9E,OACvC2B,EAAcmD,EAAS9E,OACvB,EAAK+E,eALO,2CAjDA,EAyDdA,aAzDc,sBAyDC,gCAAAxF,EAAA,6DACPS,EAAQkB,aAAa8D,QAAQ,SADtB,SAEMjF,EAAcC,GAFpB,OCtEiB,KDwExBN,EAFO,QAGJuF,cACP,EAAKJ,eAECR,EAAYvB,EAAapD,EAAKwF,SACpC,EAAKxE,SAAS,CACZ2D,YACAc,SAAS,GACR,EAAKf,YAAYC,KAVT,2CAzDD,EAuEde,YAAc,SAACC,GACb,MAAkD,EAAKpE,MAA/CH,EAAR,EAAQA,KAAM6C,EAAd,EAAcA,MAAOD,EAArB,EAAqBA,MAAO4B,EAA5B,EAA4BA,kBACtBC,EAAW5B,EAAQ0B,EACnBG,EAAU,CAAE1E,OAAM6C,MAAO4B,EAAUE,QAAQ,mCAAD,OAAqC/B,IACrF4B,EAAkBC,GAClBrE,aAAaC,QAAQ,UAAWuE,KAAKC,UAAUH,IAC/C,EAAKI,kBA7EO,EAgFdA,eAAiB,WACf,MAA+C,EAAK3E,OAEpD4E,EAFA,EAAQA,wBAAR,EAAgCC,WACS,IAlF7B,EAsFdC,eAAiB,SAACC,GAChB,IAAQ/B,EAAY,EAAK3D,MAAjB2D,QACJgC,EAAmB,EAEvB,OAAQD,GACR,ICrGgB,ODsGdC,ECrGqB,EDsGrB,MACF,ICtGkB,SDuGhBA,ECtGuB,EDuGvB,MACF,ICvGgB,ODwGdA,ECvGqB,ED4GvB,IAAMC,EClH2B,GDkHMjC,EAAUgC,EACjD,EAAKb,YAAYc,IAxGL,EA2GdC,aAAe,SAAC3C,EAAQwC,GACtB,EAAKtF,SAAS,CACZ0F,uBAAwB,iBACxBC,qBAAsB,gBACtBC,cAAc,GACbpC,cAAc,EAAKH,aAClBP,GAAQ,EAAKuC,eAAeC,IAjHpB,EAoHdO,eAAiB,WACf,IAAMC,EAAmB,EAAKlG,MAAxBkG,eACFA,EC1H2B,ED2H7B,EAAK9F,SAAS,CACZ2F,qBAAsB,GACtBD,uBAAwB,GACxBI,eAAgBA,GAAkB,EAClCvC,QAAS,GACTqC,cAAc,GACb,EAAKxC,UACH,EAAKpD,SAAS,CAAE+F,UAAU,KA5HjC,EAAKnG,MAAQ,CACX+D,UAAW,GACXmC,eAAgB,EAChBlC,cAAe,GACfa,SAAS,EACTkB,qBAAsB,GACtBD,uBAAwB,GACxBnC,QAAS,GACTqC,cAAc,EACdG,UAAU,GAXA,E,qDAed,WACE1E,KAAKgD,eACLhD,KAAK+B,a,kCAGP,WACEI,cAAcnC,KAAKgC,c,oBA4GrB,WAAU,IAAD,OACP,EAGIhC,KAAKzB,MAFP+D,EADF,EACEA,UAAWmC,EADb,EACaA,eAAgBrB,EAD7B,EAC6BA,QAASiB,EADtC,EACsCA,uBAAwBC,EAD9D,EAC8DA,qBAC5D/B,EAFF,EAEEA,cAAeL,EAFjB,EAEiBA,QAASqC,EAF1B,EAE0BA,aAAcG,EAFxC,EAEwCA,SAGxC,GAAItB,EAAS,OAAO,0CACpB,GAAIsB,EAAU,OAAO,kBAAC,WAAD,CAAUzE,GAAG,cAClC,MAEIqC,EAAUmC,GADZE,EADF,EACEA,SAA0BlC,EAD5B,EACYtB,eAA+BD,EAD3C,EAC2CA,SAAU+C,EADrD,EACqDA,WAGrD,OACE,oCACE,kBAAC,EAAD,MACA,0BAAM/D,UAAU,aACd,0BAAMA,UAAU,cAAegC,GAC/B,6BAAShC,UAAU,oBACjB,wBAAIA,UAAU,iBAAiBM,cAAY,qBAAqBmE,GAChE,uBAAGzE,UAAU,YAAYgB,IAG3B,6BAAShB,UAAU,iBAAiBM,cAAY,kBAC7C+B,EAAckC,GAAgBzD,KAAI,SAACS,EAAQmD,GAG1C,OAAInD,IAAWgB,EAEX,4BACEoC,IAAMpD,EACNrD,KAAK,SACL8B,UAAS,qBAAiBmE,GAC1B7D,cAAY,iBACZsE,QAAU,kBAAM,EAAKV,cAAa,EAAMH,IACxCtD,SAAwB,IAAZuB,GAEXT,GAKL,4BACEoD,IAAMpD,EACNrD,KAAK,SACLoC,cAAA,uBAA8BoE,GAC9B1E,UAAS,qBAAiBoE,GAC1BQ,QAAU,kBAAM,EAAKV,cAAa,IAClCzD,SAAwB,IAAZuB,GAEXT,OAIT,6BAASvB,UAAU,iBAEdqE,GAA4B,IAAZrC,IAEf,4BACEhC,UAAU,WACV9B,KAAK,SACLoC,cAAY,WACZsE,QAAU9E,KAAKwE,gBAJjB,e,GA3LGO,IAAMnE,WAqOVC,eAnBS,SAAC,GAAD,IAAG5C,EAAH,EAAGA,MAAO4D,EAAV,EAAUA,OAAV,MAAwB,CAC9C5D,QACAc,KAAM8C,EAAO9C,KACb6C,MAAOC,EAAOD,MACdD,MAAOE,EAAOF,MACd+B,QAAS7B,EAAOD,MAChBmC,WAAYlC,EAAOkC,eAZM,SAACjD,GAAD,MAAe,CACxClB,cAAe,SAAC3B,GAAD,OAAW6C,EAAS5C,EAAUD,KAC7CsF,kBAAmB,SAAC3B,GAAD,OAAWd,EJ3MzB,SAAuBc,GAC5B,MAAO,CACLxD,KAd2B,kBAe3BD,QAAS,CACPyD,UIuMmCoD,CAAcpD,KACrDkC,uBAAwB,SAACC,GAAD,OAAgBjD,EJpNnC,SAA4BiD,GACjC,MAAO,CACL3F,KAPgC,uBAQhCD,QAAS,CACP4F,eIgN6CkB,CAAmBlB,QAsBvDlD,CAA6CiB,GEpO7CoD,E,4JAXb,WACE,OACE,6BACE,wBAAI1E,cAAY,kBAAhB,iB,GAJeI,aCKjBuE,E,kDACJ,aAAe,IAAD,8BACZ,gBAEK5G,MAAQ,CACX6G,cAAc,GAJJ,E,0CAQd,WAAU,IAAD,OACP,EAA8BpF,KAAKd,MAA3B6E,EAAR,EAAQA,WAAYnC,EAApB,EAAoBA,MAEpB,OADyB5B,KAAKzB,MAAtB6G,aACiB,kBAAC,WAAD,CAAUnF,GAAG,MAEpC,oCACE,kBAAC,EAAD,MACA,0BAAMC,UAAU,iBACd,6BAASA,UAAU,iBACjB,wBACEA,UAAU,aACVM,cAAY,2BAFd,sBAImBuD,IAEnB,wBACE7D,UAAU,cACVM,cAAY,wBAFd,iBAIcoB,KAGhB,6BAAS1B,UAAU,oBAEjB,wBAAIA,UAAU,iBAAiBM,cAAY,iBAA3C,YAGGuD,EFhCe,EEiCd,0BACE7D,UAAU,gBACVM,cAAY,iBAFd,sBAQE,0BACEN,UAAU,gBACVM,cAAY,iBAFd,cAQN,4BACEN,UAAU,gBACV9B,KAAK,SACLoC,cAAY,iBACZsE,QAAU,kBAAM,EAAKnG,SAAS,CAC5ByG,cAAc,MALlB,qB,GArDWL,IAAMnE,WAgFdC,eALS,SAAC,GAAD,IAAGgB,EAAH,EAAGA,OAAH,MAAiB,CACvCkC,WAAYlC,EAAOkC,WACnBnC,MAAOC,EAAOD,SAGDf,CAAyBsE,G,MC/EzB,SAASE,IACtB,OACE,kBAAC,SAAD,KACE,kBAAC,QAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAYnH,IAClC,kBAAC,QAAD,CAAOkH,KAAK,QAAQC,UAAY1D,IAChC,kBAAC,QAAD,CAAOyD,KAAK,YAAYC,UAAYN,IACpC,kBAAC,QAAD,CAAOK,KAAK,YAAYC,UAAYL,IACpC,kBAAC,QAAD,CAAOI,KAAK,IAAIC,UAAYnH,KCHdoH,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4BCXAC,EAAgB,CACpB/G,KAAM,GACNgF,WAAY,EACZnC,MAAO,EACPnD,cAAe,IAkBFoD,MAff,WAA2D,IAA3CtD,EAA0C,uDAAlCuH,EAAkC,yCAAjB1H,EAAiB,EAAjBA,KAAMD,EAAW,EAAXA,QAC7C,OAAQC,GACR,IVd4B,iBUe1B,OAAO,2BAAKG,GAAZ,IAAmBQ,KAAMZ,IAC3B,IVfkC,uBUgBhC,OAAO,2BAAKI,GAAZ,IAAmBwF,WAAY5F,EAAQ4F,aACzC,IVhB6B,kBUiB3B,OAAO,2BAAKxF,GAAZ,IAAmBqD,MAAOzD,EAAQyD,QACpC,IVjB6B,kBUkB3B,OAAO,2BAAKrD,GAAZ,IAAmBoD,MAAOxD,IAC5B,QACE,OAAOI,ICZIN,MATf,WAA0D,IAA3CM,EAA0C,uDAFnC,GAEmC,yCAAjBH,EAAiB,EAAjBA,KAAMD,EAAW,EAAXA,QAC5C,OAAQC,GACR,IXAwB,aWCtB,OAAOD,EACT,QACE,OAAOI,ICHIwH,EAFKC,0BAAgB,CAAEnE,SAAQ5D,UCCxCgI,EAAQC,sBAAYH,EAAaI,8BAAoBC,0BAAgBC,OAEvEX,OAAOY,UACTZ,OAAOO,MAAQA,GAEFA,QCFfM,IAASC,OACP,kBAAC,gBAAD,KACE,kBAAC,IAAD,CAAUP,MAAQA,GAChB,kBAACZ,EAAD,QAGJoB,SAASC,eAAe,SLqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.646f91cb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trivia.466d153e.png\";","const URL_TOKEN = 'https://opentdb.com/api_token.php?command=request';\n\n// essa fetch é pra pegar o token, e podemos fazer a outra aqui mesmo depois\nexport const fetchToken = async () => {\n  try {\n    const response = await fetch(URL_TOKEN);\n    const data = response.json();\n    return data;\n  } catch (error) {\n    console.error(error.message);\n  }\n};\n\nexport const fetchQuestion = async (token) => {\n  try {\n    const response = await fetch(`https://opentdb.com/api.php?amount=5&token=${token}`);\n    const data = response.json();\n    return data;\n  } catch (error) {\n    console.error(error.message);\n  }\n};\n","import { fetchToken } from '../../services/fetch';\n\nexport const SAVE_USER_NAME = 'SAVE_USER_NAME';\nexport const SAVE_USER_ASSERTIONS = 'SAVE_USER_ASSERTIONS';\nexport const SAVE_USER_SCORE = 'SAVE_USER_SCORE';\nexport const SAVE_USER_EMAIL = 'SAVE_USER_EMAIL';\nexport const SAVE_TOKEN = 'SAVE_TOKEN';\n\nexport function saveUserAssertions(assertions) {\n  return {\n    type: SAVE_USER_ASSERTIONS,\n    payload: {\n      assertions,\n    },\n  };\n}\nexport function saveUserScore(score) {\n  return {\n    type: SAVE_USER_SCORE,\n    payload: {\n      score,\n    },\n  };\n}\n\nexport const saveToken = (payload) => ({\n  type: SAVE_TOKEN,\n  payload,\n});\n\nexport const saveName = (payload) => ({\n  type: SAVE_USER_NAME,\n  payload,\n});\n\nexport const saveEmail = (payload) => ({\n  type: SAVE_USER_EMAIL,\n  payload,\n});\n\nexport const fetchTokenThunk = () => async (dispatch) => {\n  try {\n    const token = await fetchToken();\n    dispatch(saveToken(token));\n  } catch (error) {\n    console.error(error.mesage);\n  }\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport propTypes from 'prop-types';\nimport md5 from 'crypto-js/md5';\nimport { saveToken, saveName, saveEmail } from '../redux/actions/index'; // Action\nimport { fetchToken } from '../services/fetch';\nimport trivia from '../trivia.png';\n\nclass Login extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      playerName: '',\n      gravatarEmail: '',\n      isBtnDisabled: true,\n      isLogged: false,\n    };\n  }\n\n  checkInput = () => {\n    const { playerName, gravatarEmail } = this.state;\n\n    if (playerName.length > 0 && gravatarEmail.length > 0) {\n      this.setState({\n        isBtnDisabled: false,\n      });\n    } else {\n      this.setState({\n        isBtnDisabled: true,\n      });\n    }\n  }\n\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n    this.setState({ [name]: value }, this.checkInput);\n  };\n\n  saveTokenLocalStorage = () => {\n    const { token } = this.props;\n    localStorage.setItem('token', token);\n  }\n\n  handleLogin = async (e) => {\n    e.preventDefault();\n    const { playerName, gravatarEmail } = this.state;\n    const encryptedEmail = md5(gravatarEmail).toString();\n    console.log(encryptedEmail);\n\n    const { saveTokenProp, saveNameProp, saveEmailProp } = this.props;\n    const data = await fetchToken();\n    await saveTokenProp(data.token);\n    this.saveTokenLocalStorage();\n    saveNameProp(playerName);\n    saveEmailProp(encryptedEmail);\n    this.setState({ isLogged: true });\n  };\n\n  render() {\n    const { playerName, gravatarEmail, isBtnDisabled, isLogged } = this.state;\n    if (isLogged) return <Redirect to=\"/game\" />;\n    return (\n      <main className=\"login_page\">\n        <img className=\"logo_img\" src={ trivia } alt=\"trivia\" />\n        <form className=\"login_form\" onSubmit={ this.handleLogin } action=\"\">\n          <input\n            className=\"login_input\"\n            data-testid=\"input-player-name\"\n            name=\"playerName\"\n            type=\"text\"\n            placeholder=\"Nome\"\n            value={ playerName }\n            onChange={ this.handleChange }\n          />\n          <input\n            className=\"login_input\"\n            name=\"gravatarEmail\"\n            data-testid=\"input-gravatar-email\"\n            type=\"email\"\n            placeholder=\"E-mail Gravatar\"\n            value={ gravatarEmail }\n            onChange={ this.handleChange }\n          />\n          <button\n            className=\"play_btn\"\n            disabled={ isBtnDisabled }\n            name=\"btnPlay\"\n            data-testid=\"btn-play\"\n            type=\"submit\"\n          >\n            Jogar!\n          </button>\n        </form>\n      </main>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  saveTokenProp: (token) => dispatch(saveToken(token)),\n  saveNameProp: (name) => dispatch(saveName(name)),\n  saveEmailProp: (gravatarEmail) => dispatch(saveEmail(gravatarEmail)),\n});\n\nconst mapStateToProps = ({ token, name, gravatarEmail }) => ({\n  token,\n  name,\n  gravatarEmail,\n});\n\nLogin.propTypes = {\n  saveNameProp: propTypes.func,\n  saveTokenProp: propTypes.func,\n  token: propTypes.any,\n}.isRequired;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","/* eslint-disable quotes */\nconst formatQuotes = (data) => {\n  const formated = data.map((result) => {\n    // eslint-disable-next-line camelcase\n    const { question, correct_answer, incorrect_answers } = result;\n    const formatedQ = question.replace(/&quot;/g, '\"').replace(/&#039;/g, \"'\")\n      .replace(/&eacute;/, 'é');\n    const formatedC = correct_answer.replace(/&quot;/g, '\"').replace(/&#039;/g, \"'\")\n      .replace(/&eacute;/, 'é');\n    const formatedI = incorrect_answers.map((answer) => (\n      answer.replace(/&quot;/g, '\"').replace(/&#039;/g, \"'\").replace(/&eacute;/, 'é')));\n    return {\n      ...result,\n      question: formatedQ,\n      correct_answer: formatedC,\n      incorrect_answers: formatedI,\n    };\n  });\n  return formated;\n};\n\nexport default formatQuotes;\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './header.css';\n\nclass Header extends Component {\n  render() {\n    const { name, email, score } = this.props;\n    return (\n      <div className=\"header_div\">\n        <img\n          className=\"header_img\"\n          src={ `https://www.gravatar.com/avatar/${email}` }\n          alt=\"Gravatar Profile\"\n          data-testid=\"header-profile-picture\"\n        />\n        <h2\n          className=\"player_name\"\n          data-testid=\"header-player-name\"\n        >\n          {` Player: ${name}`}\n        </h2>\n        <h2 className=\"player_score\" data-testid=\"header-score\">{`Score: ${score}`}</h2>\n      </div>\n    );\n  }\n}\n\nHeader.propTypes = {\n  nome: PropTypes.string,\n}.isRequired;\n\nfunction mapStateToProps({ player }) {\n  return {\n    name: player.name,\n    email: player.email,\n    score: player.score,\n  };\n}\n\nexport default connect(mapStateToProps)(Header);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { saveToken, saveUserScore, saveUserAssertions } from '../redux/actions/index';\nimport { fetchQuestion, fetchToken } from '../services/fetch';\nimport formatQuotes from '../utils/formatString';\nimport Header from '../components/Header';\nimport {\n  SORT_NUMBER, EXPIRED_TOKEN_CODE, ONE_SECOND, CORRECT_ANSWER_POINTS, EASY,\n  EASY_POINTS, MEDIUM, MEDIUM_POINTS, HARD, HARD_POINTS,\n  LAST_QUESTION_INDEX } from '../helpers/consts';\n\nclass Game extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      questions: [],\n      questionNumber: 0,\n      sortedAnswers: [],\n      loading: true,\n      wrongAnswerClassName: '',\n      correctAnswerClassName: '',\n      counter: 30,\n      nextQuestion: false,\n      feedback: false,\n    };\n  }\n\n  componentDidMount() {\n    this.getQuestions();\n    this.setTimer();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalId);\n  }\n\n  setTimer = () => {\n    this.intervalId = setInterval(() => {\n      const { counter } = this.state;\n      if (counter <= 0) {\n        clearInterval(this.intervalId);\n        this.setState({ counter: 0 });\n      } else {\n        this.setState((prevState) => ({\n          counter: prevState.counter - 1,\n        }));\n      }\n    }, ONE_SECOND);\n  }\n\n  sortAnswers = (questions) => {\n    // monta um array de arrays, cada array corresponde a uma pergunta e contém suas respectivas respostas embaralhadas\n    // e joga o resultado no estado sortedAnswers\n\n    const sortedAnswers = questions.map((quest) => {\n      const { correct_answer: correctAnswer, incorrect_answers: incorrectAnswer } = quest;\n      return [correctAnswer, ...incorrectAnswer].sort(() => Math.random() - SORT_NUMBER); // https://flaviocopes.com/how-to-shuffle-array-javascript/\n    });\n    this.setState({ sortedAnswers });\n  }\n\n  getNewToken = async () => {\n    const { saveTokenProp } = this.props;\n    const newToken = await fetchToken(); // Faz requisição de um novo token\n    localStorage.setItem('token', newToken.token); // salva o novo token no local Storage\n    saveTokenProp(newToken.token); // Salva o novo token no estado global\n    this.getQuestions(); // chama novamente a getQuestion para requerir as perguntas\n  }\n\n  getQuestions = async () => {\n    const token = localStorage.getItem('token'); // recupera o token do localStorage\n    const data = await fetchQuestion(token); // requisição das perguntas\n    if (data.response_code === EXPIRED_TOKEN_CODE) {\n      this.getNewToken(); // se o token estiver expirado chama a getNewQuestion\n    } else {\n      const questions = formatQuotes(data.results);\n      this.setState({\n        questions,\n        loading: false,\n      }, this.sortAnswers(questions));\n    }\n  }\n\n  saveRanking = (newPoints) => {\n    const { name, score, email, saveUserScoreProp } = this.props;\n    const newScore = score + newPoints;\n    const ranking = { name, score: newScore, picture: `https://www.gravatar.com/avatar/${email}` };\n    saveUserScoreProp(newScore);\n    localStorage.setItem('ranking', JSON.stringify(ranking));\n    this.saveAssertions();\n  }\n\n  saveAssertions = () => {\n    const { saveUserAssertionsProp, assertions } = this.props;\n    const newNumberAssertions = assertions + 1;\n    saveUserAssertionsProp(newNumberAssertions);\n  }\n\n  calculateTotal = (difficulty) => {\n    const { counter } = this.state;\n    let difficultyPoints = 0;\n\n    switch (difficulty) {\n    case EASY:\n      difficultyPoints = EASY_POINTS;\n      break;\n    case MEDIUM:\n      difficultyPoints = MEDIUM_POINTS;\n      break;\n    case HARD:\n      difficultyPoints = HARD_POINTS;\n      break;\n    default:\n      break;\n    }\n    const total = CORRECT_ANSWER_POINTS + (counter * difficultyPoints);\n    this.saveRanking(total);\n  }\n\n  selectAnswer = (answer, difficulty) => {\n    this.setState({\n      correctAnswerClassName: 'correct-answer',\n      wrongAnswerClassName: 'wrong-answers',\n      nextQuestion: true,\n    }, clearInterval(this.intervalId));\n    if (answer) this.calculateTotal(difficulty);\n  }\n\n  switchQuestion = () => {\n    let { questionNumber } = this.state;\n    if (questionNumber < LAST_QUESTION_INDEX) {\n      this.setState({\n        wrongAnswerClassName: '',\n        correctAnswerClassName: '',\n        questionNumber: questionNumber += 1,\n        counter: 30,\n        nextQuestion: false,\n      }, this.setTimer);\n    } else this.setState({ feedback: true });\n  }\n\n  render() {\n    const {\n      questions, questionNumber, loading, correctAnswerClassName, wrongAnswerClassName,\n      sortedAnswers, counter, nextQuestion, feedback,\n    } = this.state;\n\n    if (loading) return <h1>loading...</h1>;\n    if (feedback) return <Redirect to=\"/feedback\" />;\n    const {\n      category, correct_answer: correctAnswer, question, difficulty,\n    } = questions[questionNumber];\n\n    return (\n      <>\n        <Header />\n        <main className=\"game_page\">\n          <span className=\"game_timer\">{ counter }</span>\n          <section className=\"question_section\">\n            <h3 className=\"question_title\" data-testid=\"question-category\">{category}</h3>\n            <p className=\"question\">{question}</p>\n          </section>\n\n          <section className=\"answer_section\" data-testid=\"answer-options\">\n            {sortedAnswers[questionNumber].map((answer, index) => {\n              // usa o mesmo index questionNumber da pergunta sendo exibida na tela \"questions[questionNumber]\"\n              // passa pelo array de respostas da pergunta da vez, e monta os botões com as repostas\n              if (answer === correctAnswer) {\n                return (\n                  <button\n                    key={ answer }\n                    type=\"button\"\n                    className={ `answer_btn ${correctAnswerClassName}` }\n                    data-testid=\"correct-answer\"\n                    onClick={ () => this.selectAnswer(true, difficulty) }\n                    disabled={ (counter === 0) } // se o estado counter for igual a 0 o disable passa a ser true\n                  >\n                    {answer}\n                  </button>\n                );\n              }\n              return (\n                <button\n                  key={ answer }\n                  type=\"button\"\n                  data-testid={ `wrong-answer-${index}` }\n                  className={ `answer_btn ${wrongAnswerClassName}` }\n                  onClick={ () => this.selectAnswer(false) }\n                  disabled={ (counter === 0) } // se o estado counter for igual a 0 o disable passa a ser true\n                >\n                  {answer}\n                </button>);\n            })}\n          </section>\n          <section className=\"next_section\">\n            {\n              (nextQuestion || counter === 0)\n              && (\n                <button\n                  className=\"next_btn\"\n                  type=\"button\"\n                  data-testid=\"btn-next\"\n                  onClick={ this.switchQuestion }\n                >\n                  Next\n                </button>\n              )\n            }\n          </section>\n        </main>\n      </>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  saveTokenProp: (token) => dispatch(saveToken(token)),\n  saveUserScoreProp: (score) => dispatch(saveUserScore(score)),\n  saveUserAssertionsProp: (assertions) => dispatch(saveUserAssertions(assertions)),\n});\n\nconst mapStateToProps = ({ token, player }) => ({\n  token,\n  name: player.name,\n  score: player.score,\n  email: player.email,\n  picture: player.score,\n  assertions: player.assertions,\n});\n\nGame.propTypes = {\n  saveTokenProp: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n  email: PropTypes.string.isRequired,\n  saveUserScoreProp: PropTypes.func.isRequired,\n  saveUserAssertionsProp: PropTypes.func.isRequired,\n  assertions: PropTypes.number.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n","export const SORT_NUMBER = 0.5;\nexport const EXPIRED_TOKEN_CODE = 3;\nexport const ONE_SECOND = 1000;\nexport const CORRECT_ANSWER_POINTS = 10;\nexport const EASY = 'easy';\nexport const EASY_POINTS = 1;\nexport const MEDIUM = 'medium';\nexport const MEDIUM_POINTS = 2;\nexport const HARD = 'hard';\nexport const HARD_POINTS = 3;\nexport const LAST_QUESTION_INDEX = 4;\nexport const MIN_ASSERTIONS = 3;\n","import React, { Component } from 'react';\n\nclass Settings extends Component {\n  render() {\n    return (\n      <div>\n        <h1 data-testid=\"settings-title\">\n          Settings\n        </h1>\n      </div>\n    );\n  }\n}\n\nexport default Settings;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport Header from '../components/Header';\nimport { MIN_ASSERTIONS } from '../helpers/consts';\n\nclass Feedback extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      isRedirected: false,\n    };\n  }\n\n  render() {\n    const { assertions, score } = this.props;\n    const { isRedirected } = this.state;\n    if (isRedirected) return <Redirect to=\"/\" />;\n    return (\n      <>\n        <Header />\n        <main className=\"feedback_page\">\n          <section className=\"score_section\">\n            <h3\n              className=\"assertions\"\n              data-testid=\"feedback-total-question\"\n            >\n              { `Assertions: ${assertions}` }\n            </h3>\n            <h3\n              className=\"total_score\"\n              data-testid=\"feedback-total-score\"\n            >\n              { `Score: ${score}` }\n            </h3>\n          </section>\n          <section className=\"feedback_section\">\n\n            <h1 className=\"feedback_title\" data-testid=\"feedback-text\">Feedback</h1>\n\n            {\n              (assertions < MIN_ASSERTIONS) ? (\n                <span\n                  className=\"feedback_text\"\n                  data-testid=\"feedback-text\"\n                >\n                  Could be better...\n                </span>\n              )\n                : (\n                  <span\n                    className=\"feedback_text\"\n                    data-testid=\"feedback-text\"\n                  >\n                    Well Done!\n                  </span>\n                )\n            }\n            <button\n              className=\"playAgain_btn\"\n              type=\"button\"\n              data-testid=\"btn-play-again\"\n              onClick={ () => this.setState({\n                isRedirected: true,\n              }) }\n            >\n              Play Again\n\n            </button>\n          </section>\n        </main>\n      </>\n    );\n  }\n}\n\nFeedback.propTypes = {\n  assertions: PropTypes.number,\n}.isRequired;\n\nconst mapStateToProps = ({ player }) => ({\n  assertions: player.assertions,\n  score: player.score,\n});\n\nexport default connect(mapStateToProps)(Feedback);\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Game from './pages/Game';\nimport Settings from './pages/Settings';\nimport Feedback from './pages/Feedback';\nimport './styles/index.css';\n\nexport default function App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={ Login } />\n      <Route path=\"/game\" component={ Game } />\n      <Route path=\"/settings\" component={ Settings } />\n      <Route path=\"/feedback\" component={ Feedback } />\n      <Route path=\"*\" component={ Login } />\n    </Switch>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  SAVE_USER_NAME,\n  SAVE_USER_ASSERTIONS,\n  SAVE_USER_SCORE,\n  SAVE_USER_EMAIL,\n} from '../actions/index';\n\nconst INITIAL_STATE = {\n  name: '',\n  assertions: 0,\n  score: 0,\n  gravatarEmail: '',\n};\n\nfunction player(state = INITIAL_STATE, { type, payload }) {\n  switch (type) {\n  case SAVE_USER_NAME:\n    return { ...state, name: payload };\n  case SAVE_USER_ASSERTIONS:\n    return { ...state, assertions: payload.assertions };\n  case SAVE_USER_SCORE:\n    return { ...state, score: payload.score };\n  case SAVE_USER_EMAIL:\n    return { ...state, email: payload };\n  default:\n    return state;\n  }\n}\n\nexport default player;\n","import { SAVE_TOKEN } from '../actions/index';\n\nconst INITIAL_STATE = '';\n\nfunction token(state = INITIAL_STATE, { type, payload }) {\n  switch (type) {\n  case SAVE_TOKEN:\n    return payload;\n  default:\n    return state;\n  }\n}\n\nexport default token;\n","import { combineReducers } from 'redux';\nimport player from './player';\nimport token from './token';\n\nconst rootReducer = combineReducers({ player, token });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from '../reducers/index';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nif (window.Cypress) {\n  window.store = store;\n}\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom/cjs/react-router-dom.min';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/store';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}